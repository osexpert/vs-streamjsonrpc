queue: 
  name: VSEng-MicroBuildVS2017
  timeoutInMinutes: 240

steps:
- task: CmdLine@2
  inputs:
    script: |
      del /s /q "%userprofile%\.nuget\packages"
      del /s /q "%LocalAppData%\NuGet\Cache"
      del /s /q "%AppData%\tsd-cache"
  displayName: Purge package caches

- task: MicroBuildIBCMergePlugin@0
  inputs:
    branch: svc/d15svc

- task: MicroBuildSigningPlugin@1
  inputs:
    signType: $(SignType)

- task: PowerShell@2
  displayName: Set package upload feed
  inputs:
    targetType: inline
    script: |
      if ($env:SignType -eq 'Real') {
        $feedGuid = '09d8d03c-1ac8-456e-9274-4d2364527d99'
      } else {
        $feedGuid = 'da484c78-f942-44ef-b197-99e2a1bef53c'
      }

      Write-Host "##vso[task.setvariable variable=feedGuid]$feedGuid"

- task: NuGetCommand@2
  inputs:
    restoreSolution: '**\*.sln'
    feedsToUse: config
    nugetConfigPath: src/nuget.config
  displayName: Nuget restore packages

- task: VSBuild@1
  inputs:
    vsVersion: 15.0
    msbuildArgs: /t:build,pack
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
  displayName: Build Visual Studio solution

- task: MicroBuildCleanup@1
  condition: succeededOrFailed()

## The rest of these steps are for deployment and skipped for PR builds

#- task: PublishBuildArtifacts@1
#  inputs:
#    PathtoPublish: $(build.sourcesdirectory)/bin
#    ArtifactName: bin
#    ArtifactType: Container
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@1
  inputs:
    SourceFolder: bin
    Contents: |
      StreamJsonRpc/$(BuildConfiguration)/**/StreamJsonRpc@(.pdb|.dll)
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Collecting symbols artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/symbols
    ArtifactName: symbols
    ArtifactType: Container
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@1
  inputs:
    Contents: |
      bin/**/$(BuildConfiguration)/**/StreamJsonRpc.*.nupkg
    TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
    flattenFolders: true
  displayName: Collecting deployables
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
    ArtifactName: deployables
    ArtifactType: Container
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
  inputs:
    symbolServiceURI: "https://microsoft.artifacts.visualstudio.com/DefaultCollection"
    requestName: "CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/BuildId/$(Build.BuildId)"
    sourcePath: "$(Build.ArtifactStagingDirectory)/symbols"
    usePat: "false"
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: NuGetCommand@2
  inputs:
    command: push
    searchPatternPush: '$(Build.SourcesDirectory)\bin\**\$(BuildConfiguration)\**\*.nupkg;!**\*.symbols.nupkg;!**/VS.*.nupkg'
    publishVstsFeed: $(feedGuid)
    allowPackageConflicts: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
