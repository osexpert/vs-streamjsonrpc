steps:
- task: DotNetCoreInstaller@0
  displayName: Install .NET Core SDK 2.2.104
  inputs:
    packageType: sdk
    version: 2.2.104

- script: |
    dotnet tool install --tool-path .. nbgv
    ..\nbgv cloud
    echo ##vso[task.setvariable variable=PATH]%Path%;$(Build.SourcesDirectory)
  workingDirectory: src
  displayName: Set build number

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines\variables\_pipelines.ps1
    failOnStderr: true
  displayName: Set pipeline variables based on source

- ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
  - template: azure-pipeline.microbuild.before.yml

- script: dotnet --info
  displayName: Show dotnet SDK info

  # We need nuget.exe on the PATH for our VSInsertion.ps1 script.
- task: NuGetToolInstaller@0
  displayName: Install/Pin nuget.exe version
  inputs:
    versionSpec: 4.9.4

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    verbosityRestore: normal # detailed, normal, minimal
    projects: src/**/*.sln
    feedsToUse: config
    nugetConfigPath: src/nuget.config

# Use VSBuild to pack because `dotnet pack` can't sign packages with MicroBuild.
- task: VSBuild@1
  inputs:
    vsVersion: 15.0
    msbuildArgs: /t:build,pack /m /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
  displayName: Build Visual Studio solution

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines\artifacts\VSInsertion.ps1
    failOnStderr: true
  displayName: Build VSInsertion CoreXT nupkg

- task: DotNetCoreCLI@2
  displayName: Run tests
  inputs:
    command: test
    projects: src/**/*.Tests.csproj
    arguments: --configuration $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" -v n
  condition: and(succeeded(), ne(variables['SignType'], 'real'))

- task: CopyFiles@1
  inputs:
    Contents: |
      obj/**/project.assets.json
    TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
  displayName: Collecting project.assets.json artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    ArtifactName: projectAssetsJson
    ArtifactType: Container
  displayName: Publish projectAssetsJson artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
    ArtifactName: build_logs
    ArtifactType: Container
  displayName: Publish build_logs artifacts
  condition: succeededOrFailed()

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines\variables\_pipelines.ps1
    failOnStderr: true
  displayName: Update pipeline variables based on build outputs

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines\artifacts\_pipelines.ps1
  displayName: Publish artifacts

- ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
  - template: azure-pipeline.microbuild.after.yml
