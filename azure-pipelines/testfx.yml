steps:
- script: dotnet --info
  displayName: Show dotnet SDK info

- script: dotnet build -v n -c $(BuildConfiguration) /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: Build test
  workingDirectory: ${{ parameters.projectdirectory }}

- script: dotnet test -v n -f netcoreapp1.0 -c $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/testlogs/netcoreapp1.0.trx"
  displayName: Run tests for netcoreapp1.0 on the .NET Core 1.0.11 runtime
  workingDirectory: ${{ parameters.projectdirectory }}
  env:
    DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 0
    RuntimeFrameworkVersion: 1.0.11
- script: dotnet test -v n -f netcoreapp1.0 -c $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/testlogs/netcoreapp1.1.trx"
  displayName: Run tests for netcoreapp1.0 on the .NET Core 1.1.8 runtime
  workingDirectory: ${{ parameters.projectdirectory }}
  env:
    DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 0
    RuntimeFrameworkVersion: 1.1.8
  condition: succeededOrFailed()
- script: dotnet test -v n -f netcoreapp2.0 -c $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/testlogs/netcoreapp2.0.trx"
  displayName: Run tests for netcoreapp2.0 on the .NET Core 2.0.7 runtime
  workingDirectory: ${{ parameters.projectdirectory }}
  env:
    DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 0
    RuntimeFrameworkVersion: 2.0.7
  condition: succeededOrFailed()
- script: dotnet test -v n -f netcoreapp2.1 -c $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/testlogs/netcoreapp2.1.trx"
  displayName: Run tests for netcoreapp2.1 on the .NET Core 2.1.0 runtime
  workingDirectory: ${{ parameters.projectdirectory }}
  env:
    DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 0
    RuntimeFrameworkVersion: 2.1.0
  condition: succeededOrFailed()
- script: dotnet test -v n -f netcoreapp2.2 -c $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/testlogs/netcoreapp2.2.trx"
  displayName: Run tests for netcoreapp2.2 on the .NET Core 2.2.0 runtime
  workingDirectory: ${{ parameters.projectdirectory }}
  env:
    DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 0
    RuntimeFrameworkVersion: 2.2.0
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/testlogs
    ArtifactName: ${{ parameters.testlogartifactname }}
    ArtifactType: Container
  displayName: Publish testlogs artifacts
  condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['system.pullrequest.isfork'], true))
