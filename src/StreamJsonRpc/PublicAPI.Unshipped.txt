StreamJsonRpc.HeaderDelimitedMessageHandler.HeaderDelimitedMessageHandler(System.IO.Pipelines.IDuplexPipe pipe) -> void
StreamJsonRpc.HeaderDelimitedMessageHandler.HeaderDelimitedMessageHandler(System.IO.Pipelines.PipeWriter writer, System.IO.Pipelines.PipeReader reader) -> void
StreamJsonRpc.HeaderDelimitedMessageHandler.HeaderDelimitedMessageHandler(System.IO.Stream duplexStream) -> void
StreamJsonRpc.HeaderDelimitedMessageHandler.JsonSerializer.get -> Newtonsoft.Json.JsonSerializer
StreamJsonRpc.IJsonMessageHandler
StreamJsonRpc.IJsonMessageHandler.CanRead.get -> bool
StreamJsonRpc.IJsonMessageHandler.CanWrite.get -> bool
StreamJsonRpc.IJsonMessageHandler.JsonSerializer.get -> Newtonsoft.Json.JsonSerializer
StreamJsonRpc.IJsonMessageHandler.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Newtonsoft.Json.Linq.JToken>
StreamJsonRpc.IJsonMessageHandler.WriteAsync(Newtonsoft.Json.Linq.JToken json, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
StreamJsonRpc.IMessageHandler
StreamJsonRpc.IMessageHandler.CanRead.get -> bool
StreamJsonRpc.IMessageHandler.CanWrite.get -> bool
StreamJsonRpc.IMessageHandler.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<StreamJsonRpc.Protocol.JsonRpcMessage>
StreamJsonRpc.IMessageHandler.WriteAsync(StreamJsonRpc.Protocol.JsonRpcMessage jsonRpcMessage, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
StreamJsonRpc.JsonRpc.CancelLocallyInvokedMethodsWhenConnectionIsClosed.get -> bool
StreamJsonRpc.JsonRpc.CancelLocallyInvokedMethodsWhenConnectionIsClosed.set -> void
StreamJsonRpc.JsonRpc.InvokeWithParameterObjectAsync(string targetName, object argument = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
StreamJsonRpc.JsonRpc.JsonRpc(StreamJsonRpc.IJsonMessageHandler jsonMessageHandler) -> void
StreamJsonRpc.JsonRpc.JsonRpc(StreamJsonRpc.IJsonMessageHandler jsonMessageHandler, object target) -> void
StreamJsonRpc.JsonRpcDisconnectedEventArgs.JsonRpcDisconnectedEventArgs(string description, StreamJsonRpc.DisconnectedReason reason, Newtonsoft.Json.Linq.JToken lastMessage) -> void
StreamJsonRpc.JsonRpcDisconnectedEventArgs.JsonRpcDisconnectedEventArgs(string description, StreamJsonRpc.DisconnectedReason reason, Newtonsoft.Json.Linq.JToken lastMessage, System.Exception exception) -> void
StreamJsonRpc.JsonRpcDisconnectedEventArgs.LastMessage.get -> Newtonsoft.Json.Linq.JToken
StreamJsonRpc.PipeMessageHandler<T>
StreamJsonRpc.PipeMessageHandler<T>.CanRead.get -> bool
StreamJsonRpc.PipeMessageHandler<T>.CanWrite.get -> bool
StreamJsonRpc.PipeMessageHandler<T>.Dispose() -> void
StreamJsonRpc.PipeMessageHandler<T>.Encoding.get -> System.Text.Encoding
StreamJsonRpc.PipeMessageHandler<T>.Encoding.set -> void
StreamJsonRpc.PipeMessageHandler<T>.IsDisposed.get -> bool
StreamJsonRpc.PipeMessageHandler<T>.PipeMessageHandler(System.IO.Pipelines.IDuplexPipe pipe, System.Text.Encoding encoding) -> void
StreamJsonRpc.PipeMessageHandler<T>.PipeMessageHandler(System.IO.Pipelines.PipeWriter writer, System.IO.Pipelines.PipeReader reader, System.Text.Encoding encoding) -> void
StreamJsonRpc.PipeMessageHandler<T>.PipeMessageHandler(System.IO.Stream writer, System.IO.Stream reader, System.Text.Encoding encoding) -> void
StreamJsonRpc.PipeMessageHandler<T>.Reader.get -> System.IO.Pipelines.PipeReader
StreamJsonRpc.PipeMessageHandler<T>.Writer.get -> System.IO.Pipelines.PipeWriter
StreamJsonRpc.Protocol.JsonRpcError
StreamJsonRpc.Protocol.JsonRpcError.DebuggerDisplay.get -> string
StreamJsonRpc.Protocol.JsonRpcError.Error.get -> StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail
StreamJsonRpc.Protocol.JsonRpcError.Error.set -> void
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Code.get -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Code.set -> void
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data.get -> object
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Data.set -> void
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.ErrorCode.get -> string
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.ErrorDetail() -> void
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.ErrorStack.get -> string
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Message.get -> string
StreamJsonRpc.Protocol.JsonRpcError.ErrorDetail.Message.set -> void
StreamJsonRpc.Protocol.JsonRpcError.Id.get -> object
StreamJsonRpc.Protocol.JsonRpcError.Id.set -> void
StreamJsonRpc.Protocol.JsonRpcError.JsonRpcError() -> void
StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.InternalError = -32603 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.InvalidParams = -32602 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.InvalidRequest = -32600 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.InvocationError = -32000 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.MethodNotFound = -32601 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.NoCallbackObject = -32001 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.ParseError = -32700 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcErrorCode.RequestCanceled = -32800 -> StreamJsonRpc.Protocol.JsonRpcErrorCode
StreamJsonRpc.Protocol.JsonRpcMessage
StreamJsonRpc.Protocol.JsonRpcMessage.JsonRpcMessage() -> void
StreamJsonRpc.Protocol.JsonRpcMessage.Version.get -> string
StreamJsonRpc.Protocol.JsonRpcMessage.Version.set -> void
StreamJsonRpc.Protocol.JsonRpcRequest
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentCount.get -> int
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.MissingArgument = 3 -> StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.ParameterArgumentCountMismatch = 1 -> StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.ParameterArgumentTypeMismatch = 2 -> StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult.Success = 0 -> StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult
StreamJsonRpc.Protocol.JsonRpcRequest.Arguments.get -> object
StreamJsonRpc.Protocol.JsonRpcRequest.Arguments.set -> void
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentsArray.get -> object[]
StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentsArray.set -> void
StreamJsonRpc.Protocol.JsonRpcRequest.DebuggerDisplay.get -> string
StreamJsonRpc.Protocol.JsonRpcRequest.Id.get -> object
StreamJsonRpc.Protocol.JsonRpcRequest.Id.set -> void
StreamJsonRpc.Protocol.JsonRpcRequest.IsNotification.get -> bool
StreamJsonRpc.Protocol.JsonRpcRequest.IsResponseExpected.get -> bool
StreamJsonRpc.Protocol.JsonRpcRequest.JsonRpcRequest() -> void
StreamJsonRpc.Protocol.JsonRpcRequest.Method.get -> string
StreamJsonRpc.Protocol.JsonRpcRequest.Method.set -> void
StreamJsonRpc.Protocol.JsonRpcRequest.NamedArguments.get -> System.Collections.Generic.IReadOnlyDictionary<string, object>
StreamJsonRpc.Protocol.JsonRpcRequest.NamedArguments.set -> void
StreamJsonRpc.Protocol.JsonRpcResult
StreamJsonRpc.Protocol.JsonRpcResult.DebuggerDisplay.get -> string
StreamJsonRpc.Protocol.JsonRpcResult.Id.get -> object
StreamJsonRpc.Protocol.JsonRpcResult.Id.set -> void
StreamJsonRpc.Protocol.JsonRpcResult.JsonRpcResult() -> void
StreamJsonRpc.Protocol.JsonRpcResult.Result.get -> object
StreamJsonRpc.Protocol.JsonRpcResult.Result.set -> void
StreamJsonRpc.RemoteInvocationException.ErrorData.get -> object
StreamJsonRpc.RemoteInvocationException.RemoteInvocationException(string message, string remoteStack, string remoteCode, object errorData) -> void
StreamJsonRpc.StreamMessageHandler<T>
StreamJsonRpc.StreamMessageHandler<T>.CanRead.get -> bool
StreamJsonRpc.StreamMessageHandler<T>.CanWrite.get -> bool
StreamJsonRpc.StreamMessageHandler<T>.DisposalToken.get -> System.Threading.CancellationToken
StreamJsonRpc.StreamMessageHandler<T>.Dispose() -> void
StreamJsonRpc.StreamMessageHandler<T>.Encoding.get -> System.Text.Encoding
StreamJsonRpc.StreamMessageHandler<T>.Encoding.set -> void
StreamJsonRpc.StreamMessageHandler<T>.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<T>
StreamJsonRpc.StreamMessageHandler<T>.ReceivingStream.get -> System.IO.Stream
StreamJsonRpc.StreamMessageHandler<T>.SendingStream.get -> System.IO.Stream
StreamJsonRpc.StreamMessageHandler<T>.StreamMessageHandler(System.IO.Stream sendingStream, System.IO.Stream receivingStream, System.Text.Encoding encoding) -> void
StreamJsonRpc.StreamMessageHandler<T>.WriteAsync(T content, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
StreamJsonRpc.WebSocketMessageHandler.JsonSerializer.get -> Newtonsoft.Json.JsonSerializer
abstract StreamJsonRpc.PipeMessageHandler<T>.ReadCoreAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<T>
abstract StreamJsonRpc.PipeMessageHandler<T>.Write(T content, System.Threading.CancellationToken cancellationToken) -> void
abstract StreamJsonRpc.StreamMessageHandler<T>.ReadCoreAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<T>
abstract StreamJsonRpc.StreamMessageHandler<T>.WriteCoreAsync(T content, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override StreamJsonRpc.HeaderDelimitedMessageHandler.ReadCoreAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Newtonsoft.Json.Linq.JToken>
override StreamJsonRpc.HeaderDelimitedMessageHandler.Write(Newtonsoft.Json.Linq.JToken content, System.Threading.CancellationToken cancellationToken) -> void
override StreamJsonRpc.WebSocketMessageHandler.ReadCoreAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Newtonsoft.Json.Linq.JToken>
override StreamJsonRpc.WebSocketMessageHandler.WriteCoreAsync(Newtonsoft.Json.Linq.JToken content, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual StreamJsonRpc.JsonRpc.InvokeCoreAsync<TResult>(long? id, string targetName, System.Collections.Generic.IReadOnlyList<object> arguments, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>
virtual StreamJsonRpc.JsonRpc.InvokeCoreAsync<TResult>(long? id, string targetName, System.Collections.Generic.IReadOnlyList<object> arguments, System.Threading.CancellationToken cancellationToken, bool isParameterObject) -> System.Threading.Tasks.Task<TResult>
virtual StreamJsonRpc.PipeMessageHandler<T>.Dispose(bool disposing) -> void
virtual StreamJsonRpc.PipeMessageHandler<T>.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<T>
virtual StreamJsonRpc.PipeMessageHandler<T>.WriteAsync(T json, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual StreamJsonRpc.Protocol.JsonRpcRequest.TryGetArgumentByNameOrIndex(string name, int position, System.Type typeHint, out object value) -> bool
virtual StreamJsonRpc.Protocol.JsonRpcRequest.TryGetTypedArguments(System.ReadOnlySpan<System.Reflection.ParameterInfo> parameters, System.Span<object> typedArguments) -> StreamJsonRpc.Protocol.JsonRpcRequest.ArgumentMatchResult
virtual StreamJsonRpc.Protocol.JsonRpcResult.GetResult<T>() -> T
virtual StreamJsonRpc.StreamMessageHandler<T>.Dispose(bool disposing) -> void
virtual StreamJsonRpc.StreamMessageHandler<T>.FlushCoreAsync() -> System.Threading.Tasks.ValueTask